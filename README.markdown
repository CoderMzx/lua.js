This project aims to convert Lua code to ECMAscript code, either using a compile tool, or live if the environment supports it.

Download
========

[lua.min.js](http://raw.github.com/mherkender/lua.js/precompiled/lua.min.js)
[lua+parser.min.js](http://raw.github.com/mherkender/lua.js/precompiled/lua+parser.min.js) (for runtime parsing)
[lua2js](http://raw.github.com/mherkender/lua.js/precompiled/lua2js) (for offline parsing)

To build it yourself, just run make in the root of the project.

`make CLOSURE_COMPILER=/path/to/closure/compiler.jar`

(the CLOSURE_COMPILER variable only needs to be set if you're building the minified versions of the scripts)

Usage
=====

You can use the lua2js tool to translate Lua code into Javascript directly.

`./lua2js input.lua output.js`

([node](http://nodejs.org/) is required to run lua2js)

lua(.min).js must also be embedded on the same page as generated Javascript code. It contains all the functions necessary to keep the code working.

lua2js also generates valid ActionScript 3.0 code as well. [Include](http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/statements.html#include) lua.as (not lua.js) and the generated file to make it work.

When a script generated by lua2js is run, the variable `lua_script` will be set to the global variable (_G) of the script. You can use this variable to interact with the script using the functions in lua.js/lua.as.

    // this is equivalent to: init(1, 2, 3)
    lua_call(lua_tableget(lua_script, "init"), [1, 2, 3]);

    // this is equivalent to: local numActive = activeChars.count
    var numActive = lua_tableget(lua_tableget(lua_script, "activeChars"), "count")
    
    // this is equivalent to: local distFromCenter = get_distance({x=1, y=2})
    var distFromCenter = lua_call(lua_tableget(lua_script, "get_distance"), [lua_newtable(null, "x", 1, "y", 2)])[0];

You can also use the function `lua_load()` to parse Lua code in the browser. `lua_load()` is only available when the lua+parser.js version of lua.js is used. `lua_load()` will parse the script, and return a function that will execute the script when called and returning the global variable of that script.

Known issues
------------

*   There are missing library functions and incomplete implementations of some functions. They should all be marked with TODO comments, or throw "Not supported" errors.
*   The global table does not currently support metatables.
*   The parser isn't completely Lua compatible, and may reject valid Lua code in certain cases.
*   Some Lua functions do not handle error conditions in the same way as standard Lua does.
*   Nested comments (e.g. `--[=[ ]=]--`) are not supported

Some implementation details
---------------------------

*   Lua functions in Javascript always return arrays. This is to support the multiple return values that Lua uses.
*   Tables are normal objects with sub-objects (str, uints, etc) that seperate different kinds of keys from each other.
*   The `uints` key in an object can be an array or an object, depending on how it is used. If `table.insert` is used for example, then it will be converted to an array if it is not already one. To force uints to be one thing or another, use `ensure_arraymode()` or `ensure_notarraymode()` to require it be available in a certain form.
*   lua.js can be compiled using Closure Compiler's ADVANCED_OPTIMIZATIONS mode for a dramatically smaller total file size. This is more complicated than traditional minifying so you'll need to use variable maps or combine the scripts.
